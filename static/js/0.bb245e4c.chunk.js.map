{"version":3,"sources":["../node_modules/@material-ui/styles/esm/ThemeProvider/ThemeProvider.js","utils/theme.js","component/Layout.jsx"],"names":["ThemeProvider","props","children","localTheme","theme","outerTheme","useTheme","React","useMemo","output","_extends","mergeOuterLocalTheme","nested","createElement","ThemeContext","Provider","value","darkTheme","createMuiTheme","palette","type","LazyNavbar","lazy","Layout","fallback","Spinner","style","backgroundColor","width","height","store"],"mappings":"mLAuEeA,MAzCf,SAAuBC,GACrB,IAAIC,EAAWD,EAAMC,SACjBC,EAAaF,EAAMG,MACnBC,EAAaC,cAQbF,EAAQG,IAAMC,SAAQ,WACxB,IAAIC,EAAwB,OAAfJ,EAAsBF,EAlCvC,SAA8BE,EAAYF,GACxC,MAA0B,oBAAfA,EACSA,EAAWE,GAWxBK,YAAS,GAAIL,EAAYF,GAqBkBQ,CAAqBN,EAAYF,GAMjF,OAJc,MAAVM,IACFA,EAAOG,KAAyB,OAAfP,GAGZI,IACN,CAACN,EAAYE,IAChB,OAAoBE,IAAMM,cAAcC,IAAaC,SAAU,CAC7DC,MAAOZ,GACNF,I,QC7BUe,EArBGC,YAAe,CAC/BC,QAAS,CACPC,KAAM,U,QCIJC,EAAaC,gBAAK,kBAAM,uDAuBfC,UArBA,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAChB,OAEE,aADA,CACC,EAAD,CAAeE,MAAOa,EAAtB,SACE,cAAC,WAAD,CAAUO,SAAU,cAACC,EAAA,EAAD,IAApB,SACE,sBACEC,MAAO,CACLC,gBAAiB,UACjBC,MAAO,QACPC,OAAQ,SAJZ,UAOE,cAACR,EAAD,CAAYS,MAAOA,MAClB5B","file":"static/js/0.bb245e4c.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@material-ui/utils';\nimport ThemeContext from '../useTheme/ThemeContext';\nimport useTheme from '../useTheme';\nimport nested from './nested'; // To support composition of theme.\n\nfunction mergeOuterLocalTheme(outerTheme, localTheme) {\n  if (typeof localTheme === 'function') {\n    var mergedTheme = localTheme(outerTheme);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!mergedTheme) {\n        console.error(['Material-UI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\\n'));\n      }\n    }\n\n    return mergedTheme;\n  }\n\n  return _extends({}, outerTheme, localTheme);\n}\n/**\n * This component takes a `theme` prop.\n * It makes the `theme` available down the React tree thanks to React context.\n * This component should preferably be used at **the root of your component tree**.\n */\n\n\nfunction ThemeProvider(props) {\n  var children = props.children,\n      localTheme = props.theme;\n  var outerTheme = useTheme();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (outerTheme === null && typeof localTheme === 'function') {\n      console.error(['Material-UI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n'));\n    }\n  }\n\n  var theme = React.useMemo(function () {\n    var output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);\n\n    if (output != null) {\n      output[nested] = outerTheme !== null;\n    }\n\n    return output;\n  }, [localTheme, outerTheme]);\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: theme\n  }, children);\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\n\nexport default ThemeProvider;","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\n/*\nconst muitheme = createMuiTheme({\n  palette: {\n    primary: {\n      light: \"#00000\",\n      main: \"#86b25f\",\n      dark: \"#212c6f\",\n    },\n    secondary: {\n      main: \"#ffc400\",\n      light: \"#ffd54f\",\n    },\n  },\n});\n*/\nexport default darkTheme;\n\n// #3f51b5;\n","import React, { Suspense, lazy } from \"react\";\n\nimport Spinner from \"./Spinner\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport darkTheme from \"../utils/theme\";\n// import { StateProvider } from \"../context/statectx\";\n\nimport store from \"../utils/store\";\nconst LazyNavbar = lazy(() => import(\"./Navbar\"));\n\nconst Layout = ({ children }) => {\n  return (\n    // <StateProvider>\n    <ThemeProvider theme={darkTheme}>\n      <Suspense fallback={<Spinner />}>\n        <div\n          style={{\n            backgroundColor: \"#303030\",\n            width: \"100vw\",\n            height: \"100vh\",\n          }}\n        >\n          <LazyNavbar store={store} />\n          {children}\n        </div>\n      </Suspense>\n    </ThemeProvider>\n    // </StateProvider>\n  );\n};\n\nexport default Layout;\n"],"sourceRoot":""}